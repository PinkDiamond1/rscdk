name: PR
on:
  pull_request:
  push:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-code-generator:
    strategy:
      matrix:
        python-version: [3.9]
    name: run code generator tests
    runs-on: ubuntu-22.04
    steps:
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache Results
        uses: actions/cache@v2
        id: cache-tests-results
        with:
          path: |
            ~/.cargo
          key: ${{ runner.os }}-tests-code-generator-results-1
      - name: Install latest nightly
        uses: actions-rs/toolchain@v1
        with:
            toolchain: nightly
            override: true
            components: rustfmt, clippy, rust-src
      - uses: actions/checkout@v2
      - name: test code generator
        working-directory: crates/codegen
        run: |
          cargo test contract_tests::tests::
  tests:
    strategy:
      matrix:
        python-version: [3.9]
    name: run tests in tests
    runs-on: ubuntu-22.04
    steps:
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache Results
        uses: actions/cache@v2
        id: cache-tests-results
        with:
          path: |
            ~/.cargo
            tests/target
          key: ${{ runner.os }}-tests-results-1
      - name: Install latest nightly
        uses: actions-rs/toolchain@v1
        with:
            toolchain: nightly
            override: true
            components: rustfmt, clippy, rust-src
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          python3 -m pip install -U pip setuptools
          python3 -m pip install wheel
          python3 -m pip install pytest
          python3 -m pip install pytest-xdist
          python3 -m pip install ipyeos
          python3 -m pip install rust-contracts-builder
      - name: Install binaryen
        run: |
          set -e
          curl -L https://github.com/WebAssembly/binaryen/releases/download/version_109/binaryen-version_109-x86_64-linux.tar.gz | tar xzf -
          echo "`pwd`/binaryen-version_109/bin" > $GITHUB_PATH
      - name: run unit tests
        working-directory: tests
        run: |
          PYTHON_SHARED_LIB_PATH=${{ env.pythonLocation }}/lib/libpython3.9.so make -j3 -S
      - name: rm all wasm files and abi files
        run: |
          find tests -name "*.wasm" | xargs rm
          find tests -name "*.abi" | xargs rm
  examples:
    strategy:
      matrix:
        python-version: [3.9]
    name: run tests in examples
    runs-on: ubuntu-22.04
    steps:
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache Results
        uses: actions/cache@v2
        id: cache-examples-results
        with:
          path: |
            ~/.cargo
            examples/target
          key: ${{ runner.os }}-examples-results-1
      - name: Install latest nightly
        uses: actions-rs/toolchain@v1
        with:
            toolchain: nightly
            override: true
            components: rustfmt, clippy, rust-src
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          python3 -m pip install -U pip setuptools
          python3 -m pip install wheel
          python3 -m pip install pytest
          python3 -m pip install pytest-xdist
          python3 -m pip install ipyeos
          python3 -m pip install rust-contracts-builder
      - name: Install binaryen
        run: |
          set -e
          curl -L https://github.com/WebAssembly/binaryen/releases/download/version_109/binaryen-version_109-x86_64-linux.tar.gz | tar xzf -
          echo "`pwd`/binaryen-version_109/bin" > $GITHUB_PATH
      - name: run tests in examples
        working-directory: examples
        run: |
          PYTHON_SHARED_LIB_PATH=${{ env.pythonLocation }}/lib/libpython3.9.so make -j3 -S
      - name: rm all wasm files and abi files
        run: |
          find examples -name "*.wasm" | xargs rm
          find examples -name "*.abi" | xargs rm
